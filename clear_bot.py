import discord
from discord.ext import tasks
import json
import re
from datetime import datetime
import pytz
import os
from flask import Flask
from threading import Thread

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
try:
    TOKEN = os.environ['DISCORD_BOT_TOKEN']
    REPORT_CHANNEL_ID = int(os.environ['REPORT_CHANNEL_ID'])
    TIMEZONE = pytz.timezone('Europe/Kiev')
except KeyError as e:
    print(f"!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –°–µ–∫—Ä–µ—Ç '{e.args[0]}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Replit.")
    exit()

# --- –í–ï–ë-–°–ï–†–í–ï–† –î–õ–Ø UPTIMEROBOT ---
app = Flask('')
@app.route('/')
def home():
    return "I'm alive"

def run_web_server():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run_web_server)
    t.start()

# --- –ù–ê–°–¢–†–û–ô–ö–ê –ë–û–¢–ê ---
intents = discord.Intents.default()
intents.message_content = True
intents.reactions = True
intents.members = True
client = discord.Client(intents=intents)

# --- –•–†–ê–ù–ò–õ–ò–©–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò ---
daily_stats = {}
def ensure_user_stats(user_id):
    if user_id not in daily_stats:
        daily_stats[user_id] = {
            'messages': 0, 'images': 0, 'files': 0,
            'youtube_links': 0, 'other_links': 0, 'reactions_given': 0,
            'channel_activity': {}
        }

# --- –û–°–ù–û–í–ù–´–ï –°–û–ë–´–¢–ò–Ø –ë–û–¢–ê ---
@client.event
async def on_ready():
    print(f'–ë–æ—Ç {client.user} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!')
    print('------')
    generate_daily_report.start()

@client.event
async def on_message(message):
    if message.author.bot:
        return

    # [–ù–û–í–û–ï] –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
    if message.content.lower().strip() == '–≥–∞—Ä—Ä–∏, —Ç—ã —Ç—É—Ç?':
        if message.author.guild_permissions.administrator:
            await message.channel.send('–ê–≥–∞! –ë–¥—é ;)')
        return # –í–∞–∂–Ω–æ, —á—Ç–æ–±—ã —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —à–ª–∞ –≤ –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

    if message.content.lower().strip() == '–æ—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç':
        if message.author.guild_permissions.administrator:
            try:
                target_channel = message.channel
                await target_channel.send(f'**–ü—Ä–∏–Ω—è—Ç–æ!** –ù–∞—á–∏–Ω–∞—é –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É –∫–∞–Ω–∞–ª–∞ **#{target_channel.name}**.')
                deleted = await target_channel.purge(limit=1000, check=lambda m: not m.pinned)
                await target_channel.send(f'**–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!** –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: **{len(deleted)}**.', delete_after=20)
            except discord.Forbidden:
                await message.channel.send('**–û—à–∏–±–∫–∞!** –£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤–∞ "–£–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏" –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ.')
            except Exception as e:
                await message.channel.send(f'**–û—à–∏–±–∫–∞!** –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—á–∏—Å—Ç–∫—É: {e}')
        else:
            await message.channel.send('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.', delete_after=10)
        return

    # --- –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
    user_id = message.author.id
    ensure_user_stats(user_id)
    daily_stats[user_id]['messages'] += 1
    channel_id_str = str(message.channel.id)
    if channel_id_str not in daily_stats[user_id]['channel_activity']:
        daily_stats[user_id]['channel_activity'][channel_id_str] = 0
    daily_stats[user_id]['channel_activity'][channel_id_str] += 1
    urls = re.findall(r'https?://[^\s]+', message.content)
    for url in urls:
        if 'youtube.com' in url or 'youtu.be' in url:
            daily_stats[user_id]['youtube_links'] += 1
        else:
            daily_stats[user_id]['other_links'] += 1
    if message.attachments:
        for attachment in message.attachments:
            if attachment.content_type and 'image' in attachment.content_type:
                daily_stats[user_id]['images'] += 1
            else:
                daily_stats[user_id]['files'] += 1

@client.event
async def on_reaction_add(reaction, user):
    if user.bot:
        return
    ensure_user_stats(user.id)
    daily_stats[user_id]['reactions_given'] += 1

# --- –ó–ê–î–ê–ß–ê –ü–û –†–ê–°–ü–ò–°–ê–ù–ò–Æ ---
@tasks.loop(minutes=1)
async def generate_daily_report():
    now = datetime.now(TIMEZONE)
    if now.hour == 22 and now.minute == 00:
        if not hasattr(generate_daily_report, "last_run_date") or generate_daily_report.last_run_date != now.date():
            report_channel = client.get_channel(REPORT_CHANNEL_ID)
            if report_channel:
                await send_report(report_channel)
                generate_daily_report.last_run_date = now.date()

async def send_report(channel):
    global daily_stats
    embed = discord.Embed(
        title=f"üìä –°—É—Ç–æ—á–Ω—ã–π –æ—Ç—á–µ—Ç {datetime.now(TIMEZONE).strftime('%d.%m.%Y')} | –ö—Ç–æ –≤—á–µ—Ä–∞ –∑–∞–∂–∏–≥–∞–ª?",
        color=discord.Color.blue()
    )
    if not daily_stats:
        embed.description = "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Ü–∞—Ä–∏–ª–∞ –º–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–∞—è —Ç–∏—à–∏–Ω–∞. –í—Å–µ –ø–æ–∑–Ω–∞–≤–∞–ª–∏ –¥–∑–µ–Ω."
    else:
        # ... (–ª–æ–≥–∏–∫–∞ –æ—Ç—á–µ—Ç–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        def find_winner(metric):
            filtered_users = {uid: stats for uid, stats in daily_stats.items() if stats.get(metric, 0) > 0}
            if not filtered_users: return None, None
            winner_id = max(filtered_users, key=lambda u: filtered_users[u][metric])
            return winner_id, filtered_users[winner_id]
        main_chatter_id, main_chatter_stats = find_winner('messages')
        if not main_chatter_id:
             embed.description = "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ –±—ã–ª–æ –Ω–∞–ø–∏—Å–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –°—Ç—Ä–∞–Ω–Ω–∞—è —Ç–∏—à–∏–Ω–∞..."
        else:
            youtube_winner_id, youtube_stats = find_winner('youtube_links')
            image_winner_id, image_stats = find_winner('images')
            link_winner_id, link_stats = find_winner('other_links')
            reaction_winner_id, reaction_stats = find_winner('reactions_given')
            file_winner_id, file_stats = find_winner('files')
            main_chatter_user = await client.fetch_user(main_chatter_id)
            active_channels = sorted(main_chatter_stats['channel_activity'].items(), key=lambda item: item[1], reverse=True)
            main_channel_name = client.get_channel(int(active_channels[0][0])).name
            other_channels_text = ""
            if len(active_channels) > 1:
                other_names = [client.get_channel(int(cid)).name for cid, count in active_channels[1:3]]
                other_channels_text = f", –Ω–æ –Ω–µ –∑–∞–±—ã–ª —Ç–∞–∫–∂–µ –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è –≤ **#{'** –∏ **#'.join(other_names)}**!"
            embed.description = (f"–°–∞–º—ã–º –Ω–µ—É—Ç–æ–º–∏–º—ã–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –ø—Ä–∏–∑–Ω–∞–µ—Ç—Å—è **{main_chatter_user.mention}**! ...") # –°–æ–∫—Ä–∞—â–µ–Ω–æ
            async def add_field_with_fallback(winner_id, stats, metric, title, win_text, fallback_text):
                if winner_id:
                    user = await client.fetch_user(winner_id)
                    embed.add_field(name=title, value=win_text.format(user=user, count=stats[metric]), inline=False)
                else:
                    embed.add_field(name=title, value=fallback_text, inline=False)
            await add_field_with_fallback(youtube_winner_id, youtube_stats, 'youtube_links', "üì∫ ...", "...", "...")
            await add_field_with_fallback(image_winner_id, image_stats, 'images', "üñºÔ∏è ...", "...", "...")
            await add_field_with_fallback(link_winner_id, link_stats, 'other_links', "üîó ...", "...", "...")
            await add_field_with_fallback(reaction_winner_id, reaction_stats, 'reactions_given', "üëç ...", "...", "...")
            await add_field_with_fallback(file_winner_id, file_stats, 'files', "üìé ...", "...", "...")
    embed.set_footer(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—Ä–∞–Ω–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞. –°—á–µ—Ç—á–∏–∫ –æ–±–Ω—É–ª–µ–Ω.")
    await channel.send(embed=embed)
    daily_stats = {}

# --- –ó–ê–ü–£–°–ö –í–°–ï–ì–û ---
keep_alive()
try:
    client.run(TOKEN)
except Exception as e:
    print(f"!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")